{"version":3,"sources":["Task.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","margin","spacing","extendedIcon","marginRight","root","width","maxWidth","backgroundColor","palette","background","paper","multiline","display","alignItems","minHeight","wordWrap","Task","items","removeItem","editItem","changeCheck","classes","List","component","className","map","item","id","title","status","labelId","ListItem","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","onChange","ListItemText","disableTypography","primaryTypographyProps","style","whiteSpace","ListItemSecondaryAction","IconButton","onClick","fontSize","App","useState","name","setName","localStorage","getItem","JSON","parse","list","setList","isEditing","setIsEditing","editID","setEditID","useEffect","setItem","stringify","Container","onSubmit","e","preventDefault","newItem","Date","getTime","toString","TextField","label","value","fullWidth","target","Button","variant","size","color","type","length","filter","specificItem","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8e0ea1f.chunk.js","sourcesContent":["import React from \"react\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Checkbox,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles, Typography\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    root: {\n        width: '100%',\n        maxWidth: 600,\n        backgroundColor: theme.palette.background.paper,\n    },\n    multiline: {\n        '& span': {\n            width: '80%',\n            display: 'flex',\n            alignItems: 'center',\n            minHeight: 34,\n        },\n        wordWrap: 'break-word',\n    }\n}));\n\nconst Task = ({items, removeItem, editItem, changeCheck}) => {\n    const classes = useStyles();\n\n    return (\n        <List component=\"nav\" aria-label=\"main mailbox folders\" className={classes.root}>\n            {items.map((item) => {\n                const {id, title, status} = item;\n                const labelId = `checkbox-list-label-${id}`;\n                return (\n                    <ListItem key={id} alignItems=\"flex-start\">\n                        <Checkbox\n                            edge=\"start\"\n                            checked={status}\n                            tabIndex={-1}\n                            disableRipple\n                            inputProps={{'aria-labelledby': labelId}}\n                            onChange={() => changeCheck(id, status)}\n                        />\n                        <ListItemText disableTypography={false}\n                                      primaryTypographyProps={{style: {whiteSpace: \"normal\"}}}\n                                      className={classes.multiline}>\n                            {title}\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <IconButton aria-label=\"delete\"\n                                        className={classes.margin}\n                                        onClick={() => editItem(id)}>\n                                <EditIcon fontSize=\"small\"/>\n                            </IconButton>\n                            <IconButton aria-label=\"delete\"\n                                        className={classes.margin}\n                                        onClick={() => removeItem(id)}>\n                                <DeleteIcon fontSize=\"small\"/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nexport default Task;","import React, {useState, useEffect} from \"react\";\nimport Task from \"./Task\";\nimport \"./App.css\";\nimport {Button, Container, makeStyles, TextField} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n}));\n\nconst getLocalStorage = () => {\n    let list = localStorage.getItem(\"list\");\n    if (list) {\n        return (list = JSON.parse(localStorage.getItem(\"list\")));\n    } else {\n        return [];\n    }\n};\n\nexport const App = () => {\n    const classes = useStyles();\n\n    const [name, setName] = useState(\"\");\n    const [list, setList] = useState(getLocalStorage());\n    const [isEditing, setIsEditing] = useState(false);\n    const [editID, setEditID] = useState(null);\n    const [status, setStatus] = useState(false);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (name) {\n            if (name && isEditing) {\n                setList(\n                    list.map((item) => {\n                        if (item.id === editID) {\n                            return {...item, title: name};\n                        }\n                        return item;\n                    })\n                );\n                setName(\"\");\n                setEditID(null);\n                setIsEditing(false);\n            } else {\n                const newItem = {id: new Date().getTime().toString(), title: name, status: false};\n\n                setList([...list, newItem]);\n                setName(\"\");\n            }\n        }\n    }\n\n\n    const removeItem = (id) => {\n        setList(list.filter((item) => item.id !== id));\n    };\n    const editItem = (id) => {\n        const specificItem = list.find((item) => item.id === id);\n        setIsEditing(true);\n        setEditID(id);\n        setName(specificItem.title);\n    };\n\n    const changeCheck = (id, status) => {\n        setList(\n            list.map((item) => {\n                if (item.id === id) {\n                    return {...item, status: !status};\n                }\n                return item;\n            })\n        );\n    }\n\n    useEffect(() => {\n        localStorage.setItem(\"list\", JSON.stringify(list));\n    }, [list]);\n\n    return (\n        <Container maxWidth=\"sm\">\n            <form onSubmit={handleSubmit}>\n                <TextField id=\"standard-basic\"\n                           label=\"Введите задачу\"\n                           value={name}\n                           fullWidth\n                           onChange={(e) => setName(e.target.value)}/>\n                <Button variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        className={classes.margin}\n                        type=\"submit\">\n                    {isEditing ? \"Редактировать\" : \"Добавить\"}\n                </Button>\n            </form>\n            {list.length > 0 && (\n                <div className=\"task-body\">\n                    <Task items={list}\n                          removeItem={removeItem}\n                          editItem={editItem}\n                          changeCheck={changeCheck}/>\n                </div>\n            )}\n        </Container>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}